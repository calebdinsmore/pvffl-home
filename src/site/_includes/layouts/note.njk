---
permalink: "notes/{{ page.fileSlug | slugify }}/"
---
<!DOCTYPE html>
<html lang="{{ meta.mainLanguage }}">
  <head>
    <title>{% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}</title>
    {%include "components/pageheader.njk"%}
    {% for imp in dynamics.common.head %}
      {% include imp %}
    {% endfor %}
    {% for imp in dynamics.notes.head %}
      {% include imp %}
    {% endfor %}
  </head>
  <body class="theme-{{meta.baseTheme}} markdown-preview-view markdown-rendered markdown-preview-section {{meta.bodyClasses}}">
    {%include "components/notegrowthhistory.njk"%}
    
    {% if settings.dgShowFileTree !== true %}
      {%include "components/navbar.njk"%}
    {%else%}
      {%include "components/filetree.njk"%}
    {% endif %}

    {% if settings.dgEnableSearch === true %}
      {%include "components/searchContainer.njk"%}
    {% endif %}

    <main class="content cm-s-obsidian {{contentClasses}}">
      <header>
        {% if settings.dgShowInlineTitle === true %}
          <h1 data-note-icon="{% if noteIcon %}{{noteIcon}}{% else %}{{meta.noteIconsSettings.default}}{% endif %}">{% if title %}{{ title }}{% else %}{{ page.fileSlug }}{% endif %}</h1>
        {% endif %}
        <div class="header-meta">
          {% if settings.dgShowTags === true and tags %}
            <div class="header-tags">
              {% for tag in tags %}
                {% if tag != 'gardenEntry' and tag !='note' %}
                  <a class="tag" onclick="toggleTagSearch(this)">
                    #{{tag}}
                  </a>
                {% endif %}
              {% endfor %}
            </div>
          {% endif %}
          {%- if meta.timestampSettings.showCreated or meta.timestampSettings.showUpdated -%}
          <div class="timestamps">
            {%- if meta.timestampSettings.showCreated and created -%}
            <div><i icon-name="calendar-plus"></i> <span class="human-date" data-date="{{created}}"></span></div>
            {%- endif -%}
            {%- if meta.timestampSettings.showUpdated and updated -%}
            <div><i icon-name="calendar-clock"></i> <span class="human-date" data-date="{{updated}}"></span></div>
            {%- endif -%}
          </div>
          {%- endif -%}
        </div>
      {% for imp in dynamics.common.header %}
        {% include imp %}
      {% endfor %}
      {% for imp in dynamics.notes.header %}
        {% include imp %}
      {% endfor %}
      </header>
      {% for imp in dynamics.common.beforeContent %}
        {% include imp %}
      {% endfor %}
      {% for imp in dynamics.notes.beforeContent %}
        {% include imp %}
      {% endfor %}
      {{ content | hideDataview | taggify | link | safe}}
      {% for imp in dynamics.common.afterContent %}
        {% include imp %}
      {% endfor %}
      {% for imp in dynamics.notes.afterContent %}
        {% include imp %}
      {% endfor %}
    </main>

    {% if settings.dgShowBacklinks === true or settings.dgShowLocalGraph === true or settings.dgShowToc === true%}
      {%include "components/sidebar.njk"%}
    {% endif %}

    {% if settings.dgLinkPreview === true %}
      {%include "components/linkPreview.njk"%}
    {% endif %}
    {% include "components/references.njk" %}
    {% include "components/timestamps.njk" %}
    {% for imp in dynamics.common.footer %}
      {% include imp %}
    {% endfor %}
    {% for imp in dynamics.notes.footer %}
      {% include imp %}
    {% endfor %}
    {%include "components/lucideIcons.njk"%}
  </body>
  <script>
  (() => {
    const overlay = document.createElement('div');
    overlay.className = 'lightbox';
    const full = document.createElement('img');
    full.alt = '';
    overlay.append(full);
    document.body.append(overlay);

    // Close when clicking the backdrop
    overlay.addEventListener('click', (e) => {
      if (e.target === overlay) overlay.classList.remove('open');
    });

    // Open for any IMG on page
    document.addEventListener('click', (e) => {
      const t = e.target;
      if (t instanceof HTMLImageElement && !overlay.contains(t)) {
        e.preventDefault?.(); // stop <a><img></a> navigation
        full.src = t.dataset.full || t.currentSrc || t.src;
        full.alt = t.alt || '';
        overlay.classList.add('open');
        full.classList.remove('zoomed');
      }
    });

    // ESC to close
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') overlay.classList.remove('open');
    });

    // Prevent context menu on long-press (iOS/Safari)
    full.addEventListener('contextmenu', (e) => e.preventDefault());

    // Update transform-origin to where the pointer is (nice targeted zoom)
    function setOriginFromEvent(img, e) {
      const rect = img.getBoundingClientRect();
      const x = ('clientX' in e) ? e.clientX : (e.touches?.[0]?.clientX ?? rect.left + rect.width/2);
      const y = ('clientY' in e) ? e.clientY : (e.touches?.[0]?.clientY ?? rect.top + rect.height/2);
      const ox = ((x - rect.left) / rect.width) * 100;
      const oy = ((y - rect.top) / rect.height) * 100;
      img.style.setProperty('--ox', ox + '%');
      img.style.setProperty('--oy', oy + '%');
    }

    // Desktop: move origin as mouse moves
    full.addEventListener('mousemove', (e) => setOriginFromEvent(full, e));

    // Touch: long-press to zoom while held
    let pressTimer = null;
    let pressed = false;
    const LONG_PRESS_MS = 300;
    const MOVE_TOL = 8;
    let startX = 0, startY = 0;

    function clearPress() {
      if (pressTimer) { clearTimeout(pressTimer); pressTimer = null; }
    }

    full.addEventListener('pointerdown', (e) => {
      if (e.pointerType === 'mouse') return; // mouse uses hover
      pressed = true;
      startX = e.clientX; startY = e.clientY;
      setOriginFromEvent(full, e);
      clearPress();
      pressTimer = setTimeout(() => {
        if (pressed) full.classList.add('zoomed');
      }, LONG_PRESS_MS);
    }, { passive: true });

    full.addEventListener('pointermove', (e) => {
      if (!pressed) return;
      // cancel long-press if user moves too far (to avoid accidental zoom)
      if (Math.hypot(e.clientX - startX, e.clientY - startY) > MOVE_TOL) {
        pressed = false;
        clearPress();
        full.classList.remove('zoomed');
        return;
      }
      setOriginFromEvent(full, e);
    }, { passive: true });

    function endPress() {
      pressed = false;
      clearPress();
      full.classList.remove('zoomed');
    }
    full.addEventListener('pointerup', endPress, { passive: true });
    full.addEventListener('pointercancel', endPress, { passive: true });
  })();
  </script>
</html>
